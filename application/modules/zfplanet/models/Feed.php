<?php

/**
 * Zfplanet_Model_Feed
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 6820 2009-11-30 17:27:49Z jwage $
 */
class Zfplanet_Model_Feed extends Zfplanet_Model_Base_Feed
{

    protected $_httpClient = null;
    
    protected static $_htmlPurifier = null;
    
    public function setHttpClient(Zend_Http_Client $httpClient)
    {
        $this->_httpClient = $httpClient;
    }
    
    public function getHttpClient()
    {
        if (null === $this->_httpClient) {
            $this->_httpClient = new Zend_Http_Client();
            $this->_httpClient->setConfig(array(
                'ssl' => array(
                    'verify_peer' => true,
                    'allow_self_signed' => false,
                    'capture_peer_cert' => true
                )
            ));
        }
        return $this->_httpClient;
    }
    
    public static function getHtmlPurifier()
    {
        if (isset(self::$_htmlPurifier)) {
            return self::$_htmlPurifier;
        }
        $config = self::_getHtmlPurifierConfig();
        self::$_htmlPurifier = new HTMLPurifier($config);
        return self::$_htmlPurifier;
    }

    public function synchronise(Zend_Feed_Reader_Feed $feed = null)
    {
        try {
        if (is_null($feed)) {
            Zend_Feed_Reader::setHttpClient($this->getHttpClient());
            $feed = Zend_Feed_Reader::import($this->uri);
        }
        if ($this->uri !== $feed->getFeedLink() && !is_null($feed->getFeedLink())) {
            $this->uri = $feed->getFeedLink();
            $this->save();
        }
        foreach ($feed as $entry) {
            $entryHash = md5(
                trim($entry->getTitle())
                . trim($entry->getDescription())
                . trim($entry->getContent())
            );
            $currentEntry = Doctrine_Query::create()
                ->from('Zfplanet_Model_Entry')
                ->where('feedId = ?', $this->id)
                ->andWhere('id = ?', $entry->getId())
                ->fetchone();
            if ($currentEntry && $entryHash == $currentEntry->signatureHash) {
                continue;
            } elseif ($currentEntry) {
                $this->_setCommonData($currentEntry, $entry, $entryHash);
                $currentEntry->save();
            } else {
                $newEntry = new Zfplanet_Model_Entry;
                $newEntry->id = $entry->getId();
                $newEntry->feedId = $this->id;
                $newEntry->uri = $entry->getLink();
                $this->_setCommonData($newEntry, $entry, $entryHash);
                $newEntry->publishedDate = $entry->getDateCreated()
                    ->get(Zend_Date::ISO_8601);
                $newEntry->isActive = 1;
                $newEntry->save();
            }
        }
        } catch (Exception $e) {
            echo $e->getMessage(); exit;
        }
    }
    
    protected function _setCommonData(Zfplanet_Model_Entry $model,
    Zend_Feed_Reader_EntryAbstract $entry, $entryHash)
    {
        $model->title = self::getHtmlPurifier()->purify(
            trim($entry->getTitle())
        );
        $model->content = self::getHtmlPurifier()->purify(
            trim($entry->getContent())
        );
        $model->description = self::getHtmlPurifier()->purify(
            trim($entry->getDescription())
        );
        $author = $entry->getAuthor();
        $model->author = trim($author['name']);
        $model->updatedDate = $entry->getDateModified()
            ->get(Zend_Date::ISO_8601);
        $model->signatureHash = $entryHash;
        $model->Feed->lastSynchronised = Zend_Date::now()
            ->get(Zend_Date::ISO_8601);
    }
    
    protected static function _getHtmlPurifierConfig(array $extra = null)
    {
        $config = HTMLPurifier_Config::createDefault();
        $config->set('Cache.SerializerPath',
            APPLICATION_PATH . '/../data/cache/htmlpurifier');
        $config->set('HTML.Allowed', implode(',', array(
            'p', 'em', 'strong', 'small', 'h1', 'h2', 'h3', 'h4', 'h5',
            'ul', 'ol', 'li', 'code', 'pre', 'blockquote',
            'img[src|alt|height|width|style]', 'sub', 'sup', 'a[href|rel]',
            'div', 'span', 'br'
        )));
        $config->set('HTML.Doctype', 'XHTML 1.0 Strict');
        if (isset($extra)) {
            foreach ($extra as $key=>$value) {
                $config->set($key, $value);
            }
        }
        return $config;
    }

}
